; Looper: A long-running program for timing measurements.
; Run loop for n*m iterations, so it can execute a lot of instructions.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; This program contains two nested loops; its purpose is for testing,
; performance measurements, and demonstrating breakpoints.

; Configure the program by editing the values of n and m.  The program
; will execute 5*n*m instructions in the inner loop.  For experiments,
; it's useful to use the editor to change the values of n and m, which
; are defined near the end, then assemble and run.  This program is
; useful for comparing performance of the emulator threads.

; A breakpoint is set at the beginning of the outer loop.  Execution
; will stop at that point on every iteration of the outer loop,
; running approximately 6,000 instructions at full speed.  Try running
; the program is it is; each time you click Run it will stop at the
; breakpoint and you can see R4, the outer loop counter, advance.

; You can disable this breakpoint by putting a ; before the trap
; instruction, and set an external breakpoing: click Breakpoint, enter
; the address where you want to stop (e.g. $0008), then Refresh,
; Enable, Close.  Turn off the breakpoint by clicking Disable.

; for i := 0 to n
;   for j := 0 to m
;      sum := sum + 1

; R1   constant 1
; R2   n  number of iterations for outer loop
; R3   m  number of iterations for inner loop
; R4   i, outer loop counter:  0 ... n
; R5   j, inner loop counter   0 ... m
; R9   sum

     lea    R1,1[R0]      ; R1 = constant 1, loop increment
     load   R2,n[R0]      ; R2 = outer loop limit
     load   R3,m[R0]      ; R3 = inner loop limit
     add    R9,R0,R0      ; R9 = sum := 0

     add    R4,R0,R0      ; i := 0, initialize outer loop counter
outerloop
     lea    R10,4         ; trap code for breakpoint  BREAKPOINT
;     trap   R10,R0,R0     ; breakpoint                BREAKPOINT
     cmp    R4,R2         ; i >= n
     jumpge done[R0]      ; if i >= n then goto done

     add    R5,R0,R0      ; j := 0, initialize inner loop counter
innerloop
     cmp    R5,R3         ; j >= m
     jumpge innerdone[R0] ; if j >= m then goto innerdone
     add    R5,R5,R1      ; j := j + 1
     add    R9,R9,R1      ; sum := sum + 1
     store  R9,result     ; result := sum
     jump   innerloop[R0] ; goto innerloop

innerdone
     add    R4,R4,R1      ; i := i + 1
     jump   outerloop[R0] ; goto outer loop

done
     store  R9,result[R0] ; result := sum
     trap   R0,R0,R0      ; terminate

; Parameters determine run time: n * m iterations
n    data   1000          ; outer loop iterations
m    data   1000         ; inner loop iterations
result data 0
