; WriteBCD: Print a BCD number.
; Illustrate output of an array of decimal digits.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; This program illustrates how to print a binary coded decimal (BCD)
; number, and how to write non-reentrant procedures with static local
; data.

; The main program takes a BCD number 'decx' with 5 digits, converts
; that to a string 'str', and prints the string.  It uses several
; non-reentrant procedures, which are defined locally and use static
; local data:

;   DecString -- converts a BCD number to a string
;   AddDec -- adds two BCD numbers

;---------------------------------------------------------------------
; Main program

; Convert BCD number to string
     lea    R1,5[R0]               ; arg 1 := #digits in decx
     lea    R2,decx[R0]            ; arg 2 := &decx
     lea    R3,str[R0]             ; arg 3 := &str
     jal    R13,DecString[R0]      ; call DecString

; Write str
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,str[R0]             ; arg 2 := &str
     lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
     trap   R1,R2,R3               ; write

     trap   R0,R0,R0               ; terminate

; Data for main program
decx                               ; BCD number 26,394
     data   2
     data   9
     data   3
     data   0
     data   4
str                                ; an array of 5 words
     data   0
     data   0
     data   0
     data   0
     data   0
newline
     data   10                     ; Unicode character code for newline

;------------------------------------------------------------------------
; Procedure DecString -- convert a BCD integer to string
; Calling conventions
;   R1 = k = number of words (digits) in BCD integer x
;   R2 = xp = pointer to msb of x
;   R3 = sp = pointer to string s
DecString
     store   R4,DecStringR4[R0]    ; save R4
     store   R5,DecStringR5[R0]    ; save R5
     store   R6,DecStringR6[R0]    ; save R6
     lea     R4,1[R0]              ; R4 := constant 1
     lea     R5,$0030[R0]          ; R5 := constant unicode '0'
DecStringLoop
     cmp     R1,R0                 ; compare k, 0
     jumple  DecStringDone[R0]     ; if k <= 0 then exit loop
     load    R6,0[R2]              ; R6 := x[i]
     add     R6,R6,R5              ; R6 := unicode char for x[i]
     store   R6,0[R3]              ; s[i] := unicode char for x[i]
     add     R2,R2,R4              ; xp++
     add     R3,R3,R4              ; sp++
     sub     R1,R1,R4              ; k--
     jump    DecStringLoop[R0]     ; goto DecStringLoop
DecStringDone
     load    R4,DecStringR4[R0]    ; restore R4
     load    R5,DecStringR5[R0]    ; restore R5
     load    R6,DecStringR6[R0]    ; restore R6
     jump    0[R13]                ; return
; Data for DecString -- static allocation
DecStringR4  data  0
DecStringR5  data  0
DecStringR6  data  0
; End Procedure DecString
