; InsertionSort: Sort an array of numbers with insertion sort algorithm.
; Algorithm is given in high level language, then low level, then assembly.
; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2023

; InsertionSort is a standard sorting algorithm; it illustrates the
; translation of a high level algorithm to assembly language

; Statement of the problem
;
;   Given
;     n (size of array x)
;     array x[0], ..., x[n-1]
;   The problem is to rearrange the elements of x so that
;     x[0] <= x[1] <= ... <= x[n-1]
;
; The insertion sort algorithm:
;
;   for i := 1 to n-1
;     { y := x[i];
;       j := i-1;
;       while j >= 0 && x[j] > y
;         { x[j+1] := x[j];
;           j := j-1; }
;       x[j+1] := y; }

; Register usage
;   R1 = 1
;   R2 = n
;   R3 = i
;   R4 = j
;   R5 = y

InsertionSort
     lea    R1,1[R0]         ; R1 := 1
     load   R2,n[R0]         ; R2 := n
     lea    R3,1[R0]         ; i := 1

outerloop
     cmp    R3,R2            ; compare i, n
     jumpge done[R0]         ; if i >= n then exit outer loop

     load   R5,x[R3]         ; y := x[i]
     sub    R4,R3,R1         ; j := i-1

innerloop
     cmp    R4,R0            ; compare j, 0
     jumplt innerdone[R0]    ; if j < 0 then exit inner loop
     load   R7,x[R4]         ; R7 := x[j]
     cmp    R7,R5            ; compare x[j], y
     jumple innerdone[R0]    ; if x[j] <= y then exit inner loop
     add    R6,R4,R1         ; R6 := j+1
     store  R7,x[R6]         ; x[j+1] := x[j]
     sub    R4,R4,R1         ; j := j-1
     jump   innerloop[R0]    ; continue innerloop

innerdone
     add    R6,R4,R1         ; R6 := j+1
     store  R5,x[R6]         ; x[j+1] := y
     add    R3,R3,R1         ; i := i+1
     jump   outerloop[R0]    ; continue outer loop

done
     trap   R0,R0,R0         ; terminate

n    data   10

x    data   39
     data   14
     data   72
     data    6
     data   61
     data   13
     data   56
     data   67
     data   29
     data   40

     data   -1

