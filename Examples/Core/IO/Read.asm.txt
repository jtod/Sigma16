; Read: Demonstrate how to read input using a trap instruction.
; Set trap code, address of buffer, and number of characters to read.
; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2023

; Demonstrate how to read characters entered by the user

; Type some text into the Input Buffer, which appears in the Processor
; tab.  You may need to expand the browser window, or shrink the area
; devoted to the User Guide, to make the Input Buffer visible (click
; the => arrow on the top button bar).

; The input request is performed by executing a trap, where the first
; register argument contains a numeric code indicating "non-blocking
; read", the second argument contains the address in memory to start
; storing the input, and the third argument gives a limit on how many
; characters to read.

; When the program finishes, the characters that were read will appear
; in the memory, starting at the address of the buffer.  These
; characters will also be removed from the input buffer, and they will
; be visible in the Input/Output log (above the input buffer).  The
; registers are also updated: the second argument (R2 in this program)
; is the address of the last word that was stored, and the third
; argument (R3 in this program) is set to the number of characters
; that were actually read in.

; Try running the program with input shorter than the buffer size
; (e.g. "dog") and again with input longer than the buffer size
; ("elephant").  Check the results in three places: (1) the input has
; been stored into memory; (2) the registers R2, R3 have been updated
; to indicate how much was read; (3) the characters that were read
; have moved from the input buffer to the I/O log.

     lea   R1,1[R0]         ; trap code for non-blocking read
     lea   R2,buffer[R0]    ; array to store input data
     load  R3,bufsize[R0]   ; maximum number of characters to read
     trap  R1,R2,R3         ; read the input and store into buffer
     trap  R0,R0,R0         ; terminate

bufsize  data  5            ; size of the buffer; don't read more than this
buffer
     data  0
     data  0
     data  0
     data  0
     data  0
     data  0
     data  0
