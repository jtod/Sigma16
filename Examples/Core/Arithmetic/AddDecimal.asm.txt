; AddDecimal: Add BCD (Binary Coded Decimal) numbers.
; Illustrate BCD representation and arithmetic.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; This program illustrates how to add binary coded decimal (BCD)
; numbers.  It follows on from WriteBCD; it's a good idea to look at
; that program first.

; The main program takes two BCD numbers, prints them, adds them, and
; prints the sum.

; BinToDec -- converts a binary number to decimal (BCD)
; DecString -- converts a BCD number to a string
; AddDec -- adds two BCD numbers

; Algorithm
;   x := 26,394   (initial value)
;   y :=  8,259   (initial value)
;   print x
;   print y
;   sum := x + y  (expected result is 34,653)
;   print sum

;---------------------------------------------------------------------
; Main program

; Print x
; Convert x to string
     load   R1,k[R0]               ; arg 1 := #digits in decx
     lea    R2,x[R0]               ; arg 2 := &x
     lea    R3,str[R0]             ; arg 3 := &str
     jal    R14,DecString[R0]      ; call DecString

; Print "x =   "
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,xlabel[R0]          ; arg 2 := &xlabel
     lea    R3,6[R0]               ; arg 3 := #chars
     trap   R1,R2,R3               ; write

; Print string containing x
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,str[R0]             ; arg 2 := &str
     lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
     trap   R1,R2,R3               ; write

; Print y
; Convert y to string
     load   R1,k[R0]               ; arg 1 := #digits in decx
     lea    R2,y[R0]               ; arg 2 := &x
     lea    R3,str[R0]             ; arg 3 := &str
     jal    R14,DecString[R0]      ; call DecString

; Print "y =   "
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,ylabel[R0]          ; arg 2 := &ylabel
     lea    R3,6[R0]               ; arg 3 := #chars
     trap   R1,R2,R3               ; write

; Print string containing y
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,str[R0]             ; arg 2 := &str
     lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
     trap   R1,R2,R3               ; write

; Calculate sum := x + y
     load   R1,k[R0]               ; R1 := size of the BCD numbers
     lea    R2,xlsd[R0]            ; R2 := & least sig digit of x
     lea    R3,ylsd[R0]            ; R3 := & least sig digit of y
     lea    R4,sumlsd[R0]          ; R4 := & least sig digit of sum
     jal    R14,AddDec[R0]         ; sum := x + y

; Print sum
; Convert sum to string
     load   R1,k[R0]               ; arg 1 := #digits in decx
     lea    R2,sum[R0]             ; arg 2 := &sum
     lea    R3,str[R0]             ; arg 3 := &str
     jal    R14,DecString[R0]      ; call DecString

; Print "sum = "
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,sumlabel[R0]        ; arg 2 := &sumlabel
     lea    R3,6[R0]               ; arg 3 := #chars
     trap   R1,R2,R3               ; write

; Print string containing sum
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,str[R0]             ; arg 2 := &str
     lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
     trap   R1,R2,R3               ; write

; terminate
     trap   R0,R0,R0               ; terminate

;---------------------------------------------------------------------
; Data for main program
k    data   5                      ; size of the BCD numbers

xlabel                             ; string "x = "
     data   $0078                  ; char x
     data   $0020                  ; char space
     data   $003d                  ; char =
     data   $0020                  ; char space
     data   $0020                  ; char space
     data   $0020                  ; char space

ylabel                             ; string "y = "
     data   $0079                  ; char y
     data   $0020                  ; char space
     data   $003d                  ; char =
     data   $0020                  ; char space
     data   $0020                  ; char space
     data   $0020                  ; char space

sumlabel                           ; string "sum = "
     data   $0073                  ; char s
     data   $0075                  ; char u
     data   $006d                  ; char m
     data   $0020                  ; char space
     data   $003d                  ; char =
     data   $0020                  ; char space

newline
     data   $000a                  ; Unicode character code for newline
     data   10                     ; Unicode character code for newline

x                                  ; BCD number 26,394
     data   2
     data   6
     data   3
     data   9
xlsd
     data   4

y                                  ; BCD number 8,259
     data   0
     data   8
     data   2
     data   5
ylsd
     data   9

sum                                ; BCD number initially 0
     data   0
     data   0
     data   0
     data   0
sumlsd
     data   0

str                                ; an array of 5 words
     data   0
     data   0
     data   0
     data   0
     data   0
     data   $000a                  ; Unicode character code for newline

;---------------------------------------------------------------------
; Procedure AddDec: add two k-digit binary coded decimal (BCD) numbers

; Calling conventions;
;   Side effects: all argument registers are modified
;   R1 = k
;   R2 = xp = pointer to lsd of x
;   R3 = yp = pointer to lsd of y
;   R4 = sp = pointer to lsd of s
; Local register usage
;   R5 = constant 1
;   R6 = constant 10
;   R7 = carry
;   R8, R9, R10 hold temporary data
; Algorithm AddDec
;   carry := 0
;   while k>0 do
;     sum := *xp + *yp + carry
;     carry := 0
;     if sum > 9 then {carry := 1; sum := sum - 10}
;     *sp := sum
;     k--; xp--; yp--; sp--;
AddDec
; Save local registers
     store   R5,AddDecR5[R0]       ; save R5
     store   R6,AddDecR6[R0]       ; save R6
     store   R7,AddDecR7[R0]       ; save R7
     store   R8,AddDecR8[R0]       ; save R8
     store   R9,AddDecR9[R0]       ; save R9
     store   R10,AddDecR10[R0]     ; save R10
; Initialize
     lea     R5,1[R0]              ; R5 := constant 1
     lea     R6,10[R0]             ; R6 := constant 10
     add     R7,R0,R0              ; carry := 0
AddDecLoop
     cmp     R1,R0                 ; compare k, 0
     jumple  AddDecReturn[R0]      ; if k <= 0 then goto AddDecReturn
     load    R9,0[R2]              ; R9 := *xp = x[k]
     load    R10,0[R3]             ; R10 := *yp = y[k]
     add     R9,R9,R10             ; R9 := x[k] + y[k]
     add     R9,R9,R7              ; R9 := x[k] + y[k] + carry (= "sum")
     add     R7,R0,R0              ; carry := 0 (default)
     cmp     R9,R6                 ; compare sum, 10
     jumplt  AddDecNoCarry[R0]     ; if sum < 10 then goto AddDecNoCarry
     sub     R9,R9,R6              ; sum := sum - 10
     add     R7,R5,R0              ; carry := 1 (override default)
AddDecNoCarry
     store   R9,0[R4]              ; *sp := sum
     sub     R1,R1,R5              ; k--
     sub     R2,R2,R5              ; xp--
     sub     R3,R3,R5              ; yp--
     sub     R4,R4,R5              ; sp--
     jump    AddDecLoop[R0]      ; goto AddDecLoop
AddDecReturn
     load    R5,AddDecR5[R0]       ; restore R5
     load    R6,AddDecR6[R0]       ; restore R6
     load    R7,AddDecR7[R0]       ; restore R7
     load    R8,AddDecR8[R0]       ; restore R8
     load    R9,AddDecR9[R0]       ; restore R9
     load    R10,AddDecR10[R0]     ; restore R10
     jump    0[R14]             ; return
; Data for AddDec -- static allocation
AddDecR5  data  0
AddDecR6  data  0
AddDecR7  data  0
AddDecR8  data  0
AddDecR9  data  0
AddDecR10 data  0
; End Procedure AddDec

;--------------------------------------------------------------------------
; Procedure DecString -- convert a BCD integer to string
; Calling conventions
;   R1 = k = number of words (digits) in BCD integer x
;   R2 = xp = pointer to msb of x
;   R3 = sp = pointer to string s
DecString
     store   R4,DecStringR4[R0]    ; save R4
     store   R5,DecStringR5[R0]    ; save R5
     store   R6,DecStringR6[R0]    ; save R6
     lea     R4,1[R0]              ; R4 := constant 1
     lea     R5,$0030[R0]          ; R5 := constant unicode '0'
DecStringLoop
     cmp     R1,R0                 ; compare k, 0
     jumple  DecStringDone[R0]     ; if k <= 0 then exit loop
     load    R6,0[R2]              ; R6 := x[i]
     add     R6,R6,R5              ; R6 := unicode char for x[i]
     store   R6,0[R3]              ; s[i] := unicode char for x[i]
     add     R2,R2,R4              ; xp++
     add     R3,R3,R4              ; sp++
     sub     R1,R1,R4              ; k--
     jump    DecStringLoop[R0]  ; goto DecStringLoop
DecStringDone
     load    R4,DecStringR4[R0]    ; restore R4
     load    R5,DecStringR5[R0]    ; restore R5
     load    R6,DecStringR6[R0]    ; restore R6
     jump    0[R14]             ; return
; Data for DecString -- static allocation
DecStringR4  data  0
DecStringR5  data  0
DecStringR6  data  0
; End Procedure DecString
