; ShowInt: convert integer to string of decimal digits
; This file is part of Sigma16; see README and https://jtod.github.io/home/Sigma16/

; This Sigma16 program defines and tests ShowInt, a procedure that
; converts an integer to a string of decimal digits.

      lea    R1,2[R0]          ; trap code - write
      lea    R2,Digits[R0]     ; string of digits and -
      lea    R3,12[R0]         ; length of digits, -, and newline
      trap   R1,R2,R3          ; write

; Convert x to decimal string
      load   R1,x[R0]          ; R1 = x = integer to convert
      lea    R2,str[R0]        ; R2 = address of result string
      load   R3,size[R0]       ; R3 = size of field
      jal    R13,ShowInt[R0]   ; convert x to string

; Write x in decimal
      lea    R1,2[R0]          ; trap code - write
      lea    R2,str[R0]        ; string containing x
      load   R3,size[R0]       ; R3 = size of field
      lea    R4,1[R0]          ; R4 = 1
      add    R3,R3,R4          ; Increment size for newline character
      trap   R1,R2,R3          ; write

; Terminate
      trap   R0,R0,R0          ; terminate main program

x     data   17284  ; number to print
size  data   7      ; size of str
str   data   $003f  ; str[0] = '?' - array to hold decimal string
      data   $003f  ; str[1] = '?'
      data   $003f  ; str[2] = '?'
      data   $003f  ; str[3] = '?'
      data   $003f  ; str[4] = '?'
      data   $003f  ; str[5] = '?'
      data   $003f  ; str[6] = '?'
      data  $000a   ; newline

;***********************************************************************
; Procedure ShowInt

; Convert an integer n to a decimal string of size k at address a
; Input parameters
;   R1 = n --- integer to convert to a string
;   R2 = a --- address of array of characters to hold result
;   R3 = k --- size of result string
; Result parameters
;   R1 = code
;     0 -> ok
;     1 -> fail: more than k characters would be needed
; Effect on system state


;-----------------------------------------------------------------------
; High level algorithm

; Initialize
;   returnCode = ok    assume conversion will succeed
;   p = a + k - 1      address of current character
;   if n >= 0
;     then sign = 1    indicate nonnegative
;     else sign = -1   indicate negative
;          n = -n      make n nonnegative
; 
; Insert the digits of n into the string
;   repeat
;     if p > a
;       then (quotient,remainder) = n / 10
;            mem[p] = digits [remainder]
;            p = p - 1
;            n = quotient
;       else returnCode = fail
;   until not (n > 0 && returnCode = ok)
; 
; Insert minus sign if necessary
;   if sign < 0
;   then if p > a
;          then mem[p] = '-'
;               p = p - 1
;          else returnCode = fail
; 
; Fill remaining characters with spaces
;    while p >= a
;      mem[p] = ' '
;      p = p - 1
; 
;-----------------------------------------------------------------------
; Low level algorithm
; 
; Initialize
;     returnCode = ok    assume conversion will succeed
;     p = a + k - 1      address of current character
; 
;     if not (n >= 0) then goto IndicateNegative
;     sign = 1    indicate nonnegative
;     goto InsertDigits
; IndicateNegative
;     sign = -1   indicate negative
;     n = -n      make n nonnegative
; 
; InsertDigits  ; Insert the digits of n into the string
;     if not (p > a) then goto DigitsFail
;     (quotient,remainder) = n / 10
;     mem[p] = digits [remainder]
;     p = p - 1
;     n = quotient
;     goto CheckUntilCondition
; DigitsFail
;     returnCode = fail
; CheckUntilCondition
;     if n > 0 then goto InsertDigits
;     if returnCode = ok then goto InsertDIgit
; 
; InsertSIgn  ; insert minus sign if necessary
;     if not (sign < 0) then goto Fill
;     if not (p > a) then goto InsertFail
;     mem[p] = '-'
;     p = p - 1
;     goto Fill
; InsertFail
;     returnCode = fail
; 
; Fill  ; Fill the remaining characters with spaces
;     if not (p >= a) then goto Done
;     mem[p] = ' '
;     p = p - 1
;     goto Fill
; 
; Done
;     return

;-----------------------------------------------------------------------
; Assembly language implementation
; Register usage
;   R1 = n - the integer being converted; later holds return code
;   R2 = a - address of the result string
;   R3 = k - size of result string
;   R4 = ReturnCode (0 = ok, 1 = fail)
;   R5 = p - address of current character
;   R6 = sign

ShowInt
; Initialize
;     returnCode = ok    assume conversion will succeed
;     p = a + k - 1      address of current character
; 
;     if not (n >= 0) then goto IndicateNegative
;     sign = 1    indicate nonnegative
;     goto InsertDigits
; IndicateNegative
;     sign = -1   indicate negative
;     n = -n      make n nonnegative
; 
; InsertDigits  ; Insert the digits of n into the string
;     if not (p > a) then goto DigitsFail
;     (quotient,remainder) = n / 10
;     mem[p] = digits [remainder]
;     p = p - 1
;     n = quotient
;     goto CheckUntilCondition
; DigitsFail
;     returnCode = fail
; CheckUntilCondition
;     if n > 0 then goto InsertDigits
;     if returnCode = ok then goto InsertDIgit
; 
; InsertSIgn  ; insert minus sign if necessary
;     if not (sign < 0) then goto Fill
;     if not (p > a) then goto InsertFail
;     mem[p] = '-'
;     p = p - 1
;     goto Fill
; InsertFail
;     returnCode = fail
; 
; Fill  ; Fill the remaining characters with spaces
;     if not (p >= a) then goto Done
;     mem[p] = ' '
;     p = p - 1
;     goto Fill
; 
; Done
      jump  0[R13]  ; goto return address

Digits
      data  $0030   ; '0'
      data  $0031   ; '1'
      data  $0032   ; '2'
      data  $0033   ; '3'
      data  $0034   ; '4'
      data  $0035   ; '5'
      data  $0036   ; '6'
      data  $0037   ; '7'
      data  $0038   ; '8'
      data  $0039   ; '9'
MinusSign
      data  $002d   ; '-'
      data  $000a   ; newline

; End of procedure ShowInt
;***********************************************************************
