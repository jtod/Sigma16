; Jump: test conditional and unconditional transfer of control
; This file is part of Sigma16. See README, https://jtod.github.io/home/Sigma16/
; John O'Donnell, 2021

; Condition code flags are defined in architecture.mjs

; Each flag has a symbolic name used in the implementation, and a
; display name used in the "instruction decode" panel on the emulator
; GUI.  The usual relations < = > are used for integers (binary
; representation) , while L = G are used for natural numbers (two's
; complement representation).

; index code  display   type and relation
;----------------------------------------------
; bit 0   g      >        int >
; bit 1   G      G        nat >
; bit 2   E      =        nat,int =
; bit 3   L      L        nat <
; bit 4   l      <        int <
; bit 5   v      v        int overflow
; bit 6   V      V        int overflow
; bit 7   C      C        bin carry out, carry in (addc)
; bit 8   S      S        bin carry out, carry in (addc)
; bit 9   s      s        bin carry out, carry in (addc)

; Unconditional jump
     lea   R9,2[R4]   ; R9  := 0002
     lea   R4,20[R0]
     jump  loop[R0]
     lea   R4,7[R0]   ; R4  := 0007
     load  R2,xy[R0]  ; R2  := 002a  42
loop store R4,xy[R9] ; mem change 002c to 0007

; Jump pseudoinstructions

      lea    R1,4
      lea    R2,5

; jumplt jumps
      cmp    R1,R2      ; <
      jumplt lt1[R0]    ; should jump
      add    R9,R9,R7   ; increment error count
      jump   lt2[R0]
lt1   add    R8,R8,R7   ; increment good count
lt2
; jumplt doesn't jump
      cmp    R2,R1      ; >
      jumplt lt3[R0]    ; should not jump
      add    R8,R8,R7   ; increment good count
      jump   lt4[R0]
lt3   add    R9,R9,R7   ; increment error count
lt4

; jumpz / jumpnz
; Test jumping when register is 0

     jumpnz  R0,a[R0]      ; should not jump
     jumpz   R0,b[R0]      ; should jump to b
     lea     R9,999[R0]    ; should not execute

; Test jumping when register is not 0

b    lea     R1,1[R0]      ; R1 := 1
     jumpz   R1,c[R0]      ; should not jump
     jumpnz  R1,d[R0]      ; should jump
     lea     R9,998[R0]    ; should not execute
a    lea     R9,997[R0]    ; should not execute
c    lea     R9,996[R0]    ; should not execute

; jumpz
      lea    R1,5[R0]
      jumpz  R1,z1[R0]  ; should not jump
      add    R8,R8,R7   ; increment good count
      jump   z2[R0]
z1    add    R9,R9,R7   ; increment error count
z2    jumpz  R0,z3[R0]  ; should jump      
      add    R9,R9,R7   ; increment error count
      jump   z4[R0]
z3    add    R8,R8,R7   ; increment good count
z4
      store  R9,errs[R0]  ; save count of errors

; jumpnz
      lea    R1,5[R0]
      jumpnz R1,nz1[R0]  ; should jump
      add    R9,R9,R7    ; increment error count
      jump   nz2[R0]
nz1   add    R9,R9,R7    ; increment good count
nz2   jumpnz R0,nz3[R0]  ; should not jump      
      add    R8,R8,R7    ; increment good count
      jump   nz4[R0]
nz3   add    R9,R9,R7    ; increment error count
nz4

done
      store  R8,good[R0]   ; save count of errors
      store  R9,errs[R0]   ; save count of errors
      trap   R0,R0,R0      ; terminate

xy    data  42
      data  43
      data  44
      data  45

good  data  0             ; count of successful tests
errs  data  0             ; count of unsuccessful tests

