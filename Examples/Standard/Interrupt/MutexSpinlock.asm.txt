; MutexSpinlock: Demonstrate testset to implement critical regions
; Can either use or disable mutual exclusion on a shared variable
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2024

;----------------------------------------------------------------------
; What the program does
;----------------------------------------------------------------------

; Mutex is a common abbreviation for mutual exclusion.  It means that
; a process has exclusive access to a shared variable within a small
; "critical region".  While it has exclusive access, another proces
; cannot modify that variable, even if an interrupt causes a process
; break.

; The program contains a simple kernel and two processes.  The kernel
; gives time slices alternately to Process A and Process B, and
; terminates after each process has terminated.  Process A is a loop
; that increments a local variable Acount, and also increments a
; shared variable Shared.  Process B is similar, incrementing a local
; varaible Bcount and the same shared variable Shared.

; Naively, we would expect that at the end, Shared = Acount + Bcount.
; This will be the case if the increments to Shared are protected by
; mutual exclusion.  However, if a timer interrupt occurs at a key
; point in the program, and mutual exclusion is not used, an increment
; to Shared can be lost, and the result would then have Shared <
; Acount + Bcount.

; The behavior is controlled by parameters:
;   UseMutex   If 1, safe critical regions with testset.  If 0, unsafe.
;   interval   number of instructions before time interrupt
;   limitA     number of iterations for Process A
;   limitB     number of iterations for Process A

; If you want to run the program with mutual exclusion, set UseMutex
; to 1 (and when the program finishes, should have R5 = 0).  If you
; want to run it without mutual exclusion, set it to 0 (and at the
; end, it's likely that R5 > 0).

; The length of a time slice, measured in instructions, is specified
; by the interval variable.  If UseMutex=0, you can reduce the
; exposure to mutual exlusion errors by increasing interval.  However,
; a larger interval will also increase the inefficiency resulting from
; the spinlocks.

; Each process contains a loop that runs for limitA (or limitB)
; iterations.
  
; When the whole program terminates, the "expected" result is that
; Shared = Acount + Bcount.  Without putting the increment to Shared
; in a critical region, however, some of the increments to Shared will
; be lost, so at the end it can happen that Shared < Acount + Bcount.

; When testset is used to implement critical regions, at the end
; Shared = Acount + Bcount.

;**********************************************************************
; Kernel
;**********************************************************************

;----------------------------------------------------------------------
; Initialize kernel
;----------------------------------------------------------------------

; Prepare interrupt vector
     lea    R1,intVector[R0]      ; address of vector
     putctl R1,vect               ; initialize vector register
; Enable timer interrupt
     lea    R1,timerBit[R0]       ; flag for timer interrupt
     putctl R1,mask               ; set interrupt mask

; Initialize PCBs
     load   R3,InitProcStatus[R0] ; initial status for user process

     lea    R1,PCBA[R0]           ; pointer to Process A PCB
     lea    R2,ProcessA[R0]       ; initial pc
     store  R2,PCBpc[R1]          ; save initial pc in PCB
     store  R3,PCBstatus[R1]      ; save initial process status

     lea    R1,PCBB[R0]           ; pointer to Process A PCB
     lea    R2,ProcessB[R0]       ; initial pc
     store  R2,PCBpc[R1]          ; save initial pc in PCB
     store  R3,PCBstatus[R1]      ; save initial process status

     store   R0,SliceCount[R0]    ; initialize SliceCount := 0

; Select Process A as first process to run
     lea     R1,PCBA[R0]          ; pointer to PCB for Process A
     store   R1,CurrentPCBptr[R0] ; will run Process A

; Initialize mutex lock
     store   R0,mutex[R0]         ; 0 indicates lock is open

;----------------------------------------------------------------------
; Give time slice to current process
;----------------------------------------------------------------------

GiveTimeSlice

; Count number of time slices that have been given
     load    R1,SliceCount[R0]    ; R1 := SliceCount
     lea     R2,1[R0]             ; R2 := 1
     add     R1,R1,R2             ; SliceCount := SliceCount + 1
     store   R1,SliceCount[R0]    ; save SliceCount

; Start timer and resume process
     load    R1,CurrentPCBptr[R0] ;
     load    R2,PCBpc[R1]         ;
     putctl  R2,ipc               ;
     load    R3,PCBstatus[R1]     ;
     putctl  R3,istat             ;
     load    R4,interval[R0]      ; timer interval
     timeron R4                   ;
     restore R1,R15,8[R1]         ; restore process registers
     resume                       ; transfer to running process

;----------------------------------------------------------------------
; Handle timer interrupt
;----------------------------------------------------------------------

HandleTimerInterrupt

; Save the state of the interrupted process
     store  R1,PrimarySaveR1[R0]  ; save R1 so handler can use it
     load   R1,CurrentPCBptr[R0]  ; get address of current PCB
     save   R2,R15,9[R1]          ; save R2-R15 in current PCB
     load   R2,PrimarySaveR1[R0]  ; get back the value of R1
     store  R2,PCBR1[R1]          ; and save it in the PCB
     getctl R2,ipc                ;
     store  R2,PCBpc[R1]          ;

; At this point, the full state of the user process is saved in its
; PCB, and the kernel can use all the registers

;----------------------------------------------------------------------
; Process scheduler
;----------------------------------------------------------------------

ProcessScheduler

; Choose process to run
     lea    R8,2[R0]              ; how many processes haven't tried yet
     lea    R9,1[R0]              ; constant 1

     load   R1,CurrentPCBptr[R0]  ;
     lea    R2,PCBA[R0]           ; R2 := pointer to Process A PCB
     cmp    R1,R2                 ; if CurrentPCB is Process A
     jumpeq tryB[R0]              ; then goto choose Process B

tryA
     jumpz  R8,AllStopped[R0]
     sub    R8,R8,R9              ; decrement number of candidate processes
     lea    R3,PCBA[R0]           ; else choose process A
     load   R4,PCBterminated[R3]
     jumpz  R4,chosen[R0]
     jump   tryB

tryB
     jumpz  R8,AllStopped[R0]
     sub    R8,R8,R9              ; decrement number of candidate processes
     lea    R3,PCBB[R0]           ; else choose process A
     load   R4,PCBterminated[R3]
     jumpz  R4,chosen[R0]
     jump   tryA

chosen
     store R3,CurrentPCBptr[R0]   ; R3 contains address of chosen PCB
     jump  GiveTimeSlice[R0]      ; run the chosen process

;----------------------------------------------------------------------
; Finish kernel and halt
;----------------------------------------------------------------------

AllStopped
     load   R1,Acount[R0]      ; Process A count
     load   R2,Bcount[R0]      ; Process B count
     add    R3,R1,R2           ; Acount + Bcount
     load   R4,Shared[R0]      ; Total increments to Shared

; With mutex, expect Shared = Acount + Bcount
; Mutual exlusion violations could result in Shared < Acout + Bcount

     sub    R5,R3,R4           ; number of mutual exclution violations

; With correct implementation of mutual exclusion, the final result
; should be R5 = 0.  If access to Shared is not implemented with
; mutual exclusion, R5 > 0.

     load   R6,SliceCount[R0]  ; total number of time slices
     trap   R0,R0,R0           ; terminate the kernel

;----------------------------------------------------------------------
; Interrupt vector
;----------------------------------------------------------------------

intVector
     jump   HandleTimerInterrupt[R0]
     jump   handleSegFault[R0]
     jump   handleStackFault[R0]
     jump   HandleUserTrap[R0]
     jump   handleOverflow[R0]
     jump   handleZdiv[R0]

; The following exceptions are not expected, and if they occur they
; will terminate the program

handleSegFault
handleStackFault
handleOverflow
handleZdiv
     trap    R0,R0,R0

;----------------------------------------------------------------------
; User kernel trap
;----------------------------------------------------------------------

HandleUserTrap

; Save the state of the interrupted process
     store  R1,PrimarySaveR1[R0]  ; save R1 so handler can use it
     load   R1,CurrentPCBptr[R0]  ; get address of current PCB
     save   R2,R15,9[R1]          ; save R2-R15 in current PCB
     load   R2,PrimarySaveR1[R0]  ; get back the value of R1
     store  R2,PCBR1[R1]          ; and save it in the PCB
     getctl R2,ipc                ;
     store  R2,PCBpc[R1]          ;
     getctl R2,iir
     store  R2,PCBir[R1]
     getctl R2,iadr
     store  R2,PCBadr[R1]

; Obtain trap operands
; get the trap code and use it to index the user trap vector
     load    R2,PCBir[R1]         ; the trap instruction
     extract R3,3,0,R2,11         ; R4 := ir.d
     lea     R4,PCBR0[R1]         ; register file array in PCB
     add     R5,R4,R3             ; PCB index of R[ir.d]
     load    R6,0[R5]             ; R5 := R[ir.d]
     shiftr  R7,R6,8              ; R7 = left half of the trap code
     shiftl  R8,R7,1              ; jump table entries are 2 words
     jump    UserTrapVector[R8]   ; go to trap handler for code

UserTrapVector
     jump   HandleTrap00ff        ; request terminate process
     jump   HandleTrap01ff        ; yield

HandleTrap00ff                    ; request terminate process
     load   R1,CurrentPCBptr
     lea    R2,1[R0]
     store  R0,1[R1]              ; PCBrunning := 0
     store  R2,2[R1]              ; PCBterminated := 1
     jump   ProcessScheduler[R0]

HandleTrap01ff                    ; request yield
; nothing to do, just return to process scheduler
     jump   ProcessScheduler[R0]

;----------------------------------------------------------------------
; Process Control Block (PCB) format
;----------------------------------------------------------------------

PCBsize        equ  32
PCBid          equ   0
PCBrunning     equ   1
PCBterminated  equ   2
PCBpc          equ   3
PCBir          equ   4
PCBadr         equ   5
PCBstatus      equ   6
PCBR0          equ   7
PCBR1          equ   8
PCBR2_15       equ   9

;----------------------------------------------------------------------
; Kernel software parameters
;----------------------------------------------------------------------

; Kernel trap codes
ReqTerm         equ    $00ff    ; trap code for terminate process
ReqYield        equ    $01ff    ; trap code for yield

;----------------------------------------------------------------------
; Machine hardware parameters
;----------------------------------------------------------------------

; Status register control bit indices
userStateBit    equ    $0001   ; bit index 0
intEnable       equ    $0002   ; bit index 1

; Interrupt control bit indices
timerBit        equ    $0001   ; bit index 0
segFaultBit     equ    $0002   ; bit index 1
stackOverBit    equ    $0004   ; bit index 2
stackUnderBit   equ    $0008   ; bit index 3
userTrapBit     equ    $0010   ; bit index 4
overflowBit     equ    $0020   ; bit index 5
zDivBit         equ    $0040   ; bit index 6

;----------------------------------------------------------------------
; Kernel data
;----------------------------------------------------------------------

; Kernel constants
InitProcStatus data  $0002  ; user state, interrupts enabled

; Kernel variables
SliceCount     data     0  ; # time slices granted so far
interval       data    75  ; timer interval
PrimarySaveR1  data     0  ; temporary save R1 after interrupt
CurrentPCBptr  data     0  ; ptr to PCB for running process

; Reserve space for process control blocks
PCBA           reserve  PCBsize
PCBB           reserve  PCBsize

;**********************************************************************
; Process A
;**********************************************************************

; Register usage
;   R1 = counterA
;   R2 = limitA
;   R3 = constant 1
;   R3 = Acount local variable but 

ProcessA
; initialize
       add    R1,R0,R0        ; R1 := counterA = 0
       load   R2,limitA       ; maximum number of iterations
       lea    R3,1[R0]        ; R3 := 1, counter increment

; loop for limitA iterations
loopA  cmp    R1,R2           ; if counterA > limitA
       jumpgt doneA           ; then goto doneA
       add    R1,R1,R3        ; increment counterA

; Increment the local variable Acount
       load   R4,Acount[R0]
       lea    R5,1[R0]
       add    R4,R4,R5
       store  R4,Acount[R0]

;--------------------------------------------
; Begin: Process A increments Shared variable
;--------------------------------------------
; Use mutual exclusion if the variable UseMutex = 1

; If UseMutex, start critical region; otherwise skip it
       load    R8,UseMutex[R0]
       jumpz   R8,skipMutexA[R0]

; Initiate the critical region (if UseMutex=1)
reqA   testset R9,mutex[R0]     ; check lock and set it
       jumpnz  R9,reqA[R0]         ; if lock was closed, keep trying
skipMutexA

;----------------------------------
; Begin body of the critical region
          load   R4,Shared[R0]
          lea    R5,1[R0]
          add    R4,R4,R5
          store  R4,Shared[R0]
; End body of the critical region
;----------------------------------

; Terminate the critical region
; If UseMutex=0, this is unnecessary but harmless.
       store  R0,mutex[R0]
;--------------------------------------------
; End: Process A increments Shared variable
;--------------------------------------------

; Increment loop counter and finish loop
       add    R1,R1,R3        ; counterA := counterA + 1
       jump   loopA           ; goto LoopA

doneA  lea    R1,ReqTerm[R0]  ; trap code for terminate process
       trap   R1,R0,R0        ; request kernel to terminate
       trap   R0,R0,R0        ; Error: should never execute this!
       
; Data for Process A
limitA   data   9000          ; number of iterations for Process A
Acount   data      0

;**********************************************************************
; Process B
;**********************************************************************

ProcessB
; initialize
       add    R1,R0,R0        ; R1 := counterB = 0
       load   R2,limitB       ; maximum number of iterations
       lea    R3,1[R0]        ; R3 := 1, counter increment

; loop for limitB iterations
loopB  cmp    R1,R2           ; if counterB > limitB
       jumpgt doneB           ; then goto doneB
       add    R1,R1,R3        ; increment counterB

; Increment the local variable Bcount
       load   R4,Bcount[R0]
       lea    R5,1[R0]
       add    R4,R4,R5
       store  R4,Bcount[R0]

;--------------------------------------------
; Begin: Process B increments Shared variable
;--------------------------------------------
; Use mutual exclusion if the variable UseMutex = 1

; If UseMutex, start critical region; otherwise skip it
       load    R8,UseMutex[R0]
       jumpz   R8,skipMutexB[R0]

; Initiate the critical region (if UseMutex=1)
reqB   testset R9,mutex[R0]     ; check lock and set it
       jumpnz  R9,reqB[R0]         ; if lock was closed, keep trying
skipMutexB

;----------------------------------
; Begin body of the critical region
          load   R4,Shared[R0]
          lea    R5,1[R0]
          add    R4,R4,R5
          store  R4,Shared[R0]
; End body of the critical region
;----------------------------------

; Terminate the critical region
; If UseMutex=0, this is unnecessary but harmless.
       store  R0,mutex[R0]
;--------------------------------------------
; End: Process B increments Shared variable
;--------------------------------------------

; Do some extra work that makes an iteration of Process B take more
; instructions than an iteration of Process A

       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work
       add     R0,R0,R0       ; just some busy work

; Increment loop counter and finish loop
       add    R1,R1,R3        ; counterB := counterB + 1
       jump   loopB           ; goto LoopB

doneB  lea    R1,ReqTerm[R0]  ; trap code for terminate process
       trap   R1,R0,R0        ; request kernel to terminate
       trap   R0,R0,R0        ; Error: should never execute this!

; Data for Process B
limitB   data    10000         ; number of iterations for Process B
Bcount   data       0

;**********************************************************************
; Shared data used by both Process A and Process B
;**********************************************************************

Shared   data      0
mutex    data      0
UseMutex data      0  ; if 1 then use testset; otherwise not


; temp to ensure mem display shows last real value
       data $dcba
       data $abcd
