; Stack: Test the stack instructions: push, pop, top.
; Put test data in registers, then perform stack operations.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; R11 = stack base: address of first element in stack
; R12 = stack limit: address of last element in stack
; R10 = stack top: address of the last element pushed onto stack

; Initialize the stack
     lea   R11,StackBase[R0]    ; address of first word in the stack
     lea   R12,StackSize[R11]   ; address of word above the stack
     lea   R1,1[R0]
     sub   R12,R12,R1           ; address of last word in the stack
     lea   R10,StackBase[R0]
     sub   R10,R10,R1           ; initialize stack top to word before stack

; Prepare some test data
     lea   R1,1[R0]
     lea   R2,2[R0]
     lea   R3,3[R0]
     lea   R4,4[R0]
     lea   R5,5[R0]
     lea   R6,6[R0]
     lea   R7,7[R0]

; Perform some stack operations
; push specifies data, top and limit; pop specifies data,  top and base

     push  R1,R10,R12          ; 1
     push  R2,R10,R12          ; 1 2
     push  R3,R10,R12          ; 1 2 3
     pop   R8,R10,R11          ; => 3.  1 2
     pop   R8,R10,R11          ; => 2.  1
     push  R4,R10,R12          ; 1 4
     push  R5,R10,R12          ; 1 4 5
     push  R6,R10,R12          ; 1 4 5 6

; The stack is full; another push causes stack overflow     
     push  R7,R10,R12          ; 1 4 5 6 stack overflow, no change

     pop   R8,R10,R11          ; => 6.  1 4 5
     pop   R8,R10,R11          ; => 5.  1 4
     pop   R8,R10,R11          ; => 4.  1
     pop   R8,R10,R11          ; => 1.

; The stack should now be empty.  Now a pop should set flag in
; condition code and interrupt registers

     pop   R8,R10,R11          ; no change to R10, R11, R12; set underflow

     trap  R0,R0,R0

StackBase   data   0
StackSize   equ    4

area

   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   data    0
   



; Stack operations

test_stack
   lea   R1,1[R0]            ; some data to push onto stack
   lea   R2,2[R0]
   lea   R3,3[R0]
   lea   R4,4[R0]
   lea   R5,5[R0]
   lea   R6,6[R0]

   lea   R9,1[R0]            ; constant 1
   lea   R10,StackFirst[R0]  ; stack first
   lea   R11,StackFirst[R0]  ; stack top
   sub   R11,R11,R9          ; top = address before stack first
   lea   R12,StackLast[R0]   ; stack last

   push  R1,R11,R12
   push  R2,R11,R12
   push  R3,R11,R12
   top   R7,R11,R11
   push  R4,R11,R12
   top   R7,R11,R11
   push  R5,R11,R12
   pop   R8,R11,R10
   pop   R8,R11,R10
   top   R7,R11,R11

; Too many pops lead to stack underflow
   pop   R8,R11,R10
   pop   R8,R11,R10
   pop   R8,R11,R10
   pop   R8,R11,R10
   pop   R8,R11,R10
   pop   R8,R11,R10
   pop   R8,R11,R10

; Too many pushes lead to stack overflow
   push  R1,R11,R12
   push  R2,R11,R12
   push  R3,R11,R12
   push  R4,R11,R12
   push  R5,R11,R12
   push  R1,R11,R12
   push  R2,R11,R12
   push  R3,R11,R12
   push  R4,R11,R12
   push  R5,R11,R12

   trap  R0,R0,R0
   
StackFirst
   data   0
   data   0
   data   0
   data   0
   data   0
   data   0
StackLast


   trap R0,R0,R0
