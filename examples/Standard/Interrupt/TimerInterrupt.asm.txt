; TimerInterrupt: run a loop while responding to interrupt requests
; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2022

; This program illustrates how to set up interrupts and catch a timer
; interrupt.  The main program is an infinite loop.  When a timer
; interrupt occurs, the loop is interrupted and the handler prints
; "bing", then resumes the loop.  To generate a timer interrupt, click
; the Timer Interrupt button.

; Assemble the program, boot it, and click Run.  Then click the
; Interrupt button from time to time.  Each time you do, "bing" will
; be printed in the output window.

; Request exception for timer
     lea    R1,timerBit[R0]   ; flag for timer interrupt
     putctl R1,mask           ; set interrupt mask

; Enable interrupts and prepare interrupt vector
     lea    R1,intEnable[R0]  ; flag for interrupt enable
     putctl R1,status         ; enable interrupts
     lea    R1,intVector[R0]  ; address of vector
     putctl R1,vect           ; initialize vector register

; Run a loop
     load   R1,limit[R0]      ; limit on number of iterations
     add    R2,R0,R0          ; i := 0
     lea    R3,1[R0]          ; R3 := constant 1
loop
     cmp    R2,R1             ; compare i with n
;     jumpgt done[R0]         ; if uncommented, limit iterations
     add    R2,R2,R3          ; i := i+1
     jump   loop[R0]          ; goto loop

; Mutual exclusion
     tstset R5,mutex[R0]
done
     trap   R0,R0,R0

mutex data  0

intVector
     jump   handleTimer[R0]
     jump   handleSegFault[R0]
     jump   handleStackFault[R0]
     jump   handleUserTrap[R0]
     jump   handleOverflow[R0]
     jump   handleZdiv[R0]

handleTimer
     store  R1,save1[R0]      ; save state
     store  R2,save2[R0]      ; save state
     store  R3,save3[R0]      ; save state
     lea    R1,2[R0]          ; trap code for write
     lea    R2,timerMsg[R0]   ; message: divide by 0
     lea    R3,5[R0]          ; length of message
     trap   R1,R2,R3          ; print the message
     load   R1,save1[R0]      ; restore state
     load   R2,save2[R0]      ; restore state
     load   R3,save3[R0]      ; restore state
     resume                   ; return from interrupt

; The following exceptions just terminate the program
handleSegFault
handleStackFault
handleUserTrap
handleOverflow
handleZdiv
     trap    R0,R0,R0

; Data definitions

limit     data   5000   ; stop eventually even if not interrupted

save1           data   0
save2           data   0
save3           data   0
save4           data   0

timerMsg        data    98  ; b
                data   105  ; i
                data   110  ; n
                data   103  ; g
                data    10  ; newline

; Define status register control bits
userStateBit    equ    $0001   ; bit index 0
intEnable       equ    $0002   ; bit index 1

; Define interrupt control bit indices
timerBit        equ    $0001   ; bit index 0
segFaultBit     equ    $0002   ; bit index 1
stackOverBit    equ    $0004   ; bit index 2
stackUnderBit   equ    $0008   ; bit index 3
userTrapBit     equ    $0010   ; bit index 4
overflowBit     equ    $0020   ; bit index 5
zDivBit         equ    $0040   ; bit index 6
