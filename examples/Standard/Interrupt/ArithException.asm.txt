; ArithException: Catch exceptions in arithmetic operations.
; Set system control registers to cause interrupt on exceptions.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; This program shows how to use interrupts to catch arithmetic
; exceptions, such as overflow and divide by 0.  This approach is
; better than testing the condition code explicitly after every
; instruction: it is easier, more efficient, and it guarantees that
; every operation will be checked.

; Request exception for overflow and divide by zero

   load   R1,zdivFlag[R0]    ; flag for division by 0
   load   R2,ovflFlag[R0]    ; flag for overflow
   or     R3,R1,R2           ; flag for either zdiv of overflow
   putctl R3,imask           ; set interrupt mask

; Enable interrupts and prepare interrupt vector

   load   R1,intEnable[R0]   ; flag for interrupt enable
   putctl R1,status          ; enable interrupts
   lea    R1,intVector[R0]   ; address of vector
   putctl R1,ivect          ; initialize vector register

; Do some arithmetic that generates exceptions

   lea    R4,25[R0]           ; some test data
   lea    R5,26[R0]           ; some test data
   lea    R6,27[R0]           ; some test data
   lea    R7,7000[R0]
   lea    R8,8000[R0]
   mul    R9,R4,R5            ; no overflow
;   mul    R10,R7,R8           ; result is too big
   div    R10,R4,R0          ; divide by 0
   add    R4,R4,R4           ; did we get here?
   trap   R0,R0,R0

intVector
   jump   handleTimer[R0]
   jump   handleSegFault[R0]
   jump   handleMemFault[R0]
   jump   handleTrap[R0]
   jump   handleOverflow[R0]
   jump   handleDiv0[R0]

handleTimer
handleSegFault
handleMemFault
handleTrap
   trap   R0,R0,R0

handleOverflow
   add    R5,R5,R5     ; did we get here?
   trap   R0,R0,R0

handleDiv0
   store  R1,save1[R0]        ; save state
   store  R2,save2[R0]        ; save state
   store  R3,save3[R0]        ; save state
   lea    R1,2[R0]            ; trap code for write
   lea    R2,zDivMsg[R0]      ; message: divide by 0
   lea    R3,12[R0]           ; length of message
   trap   R1,R2,R3            ; print the message
   load   R1,save1[R0]        ; restore state
   load   R2,save2[R0]        ; restore state
   load   R3,save3[R0]        ; restore state
   rfi                        ; resume

intEnable  data  $4000        ; enable is bit 1 in system register
ovflFlag   data  $0800        ; overflow bit is 4 in mask/req
zdivFlag   data  $0400        ; zdiv is bit 5 in mask/req

save1      data   0
save2      data   0
save3      data   0

zDivMsg    data   100    ; d
           data   105    ; i
	   data   118    ; v
           data   105    ; i
           data   100    ; d
           data   101    ; e
	   data    32    ; space
	   data    98    ; b
	   data   121    ; y
	   data    32    ; space
	   data    48    ; 0
	   data    10    ; newline
	   
