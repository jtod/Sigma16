; BigPowers2:  Print powers of 2 using BCD arithmetic.
; Integers of unbounded size are represented as an array of digits.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; Print the first n powers of 2, where the powers are represented as
; k-digit BCD.  The value of n is defined in a data statement.

;---------------------------------------------------------------------
; Main program

     lea   R5,1[R0]              ; R5 := constant 1
     load  R6,n[R0]              ; R6 := n = number of powers to print
     add   R7,R0,R0              ; R7 := 0  current exponent
mainLoop
     cmp    R7,R6                ; compare i, n
     jumpge mainDone[R0]         ; if i >= n then goto mainDone

; Print x
; Convert x to string
     load   R1,k[R0]             ; arg 1 := #digits in decx
     lea    R2,x[R0]             ; arg 2 := &x
     lea    R3,str[R0]           ; arg 3 := &str
     jal    R14,DecString[R0]    ; call DecString

; Print string containing x
     lea    R1,2[R0]             ; arg 1 := trap code write
     lea    R2,str[R0]           ; arg 2 := &str
     load   R3,k[R0]             ; arg 3 := #chars
     add    R3,R3,R5             ; arg3++ to include newline
     trap   R1,R2,R3             ; write

; Calculate x := x + x
     load   R1,k[R0]             ; R1 := size of the BCD numbers
     lea    R2,xlsd[R0]          ; R2 := & least sig digit of x
     lea    R3,xlsd[R0]          ; R3 := & least sig digit of y
     lea    R4,xlsd[R0]          ; R4 := & least sig digit of sum
     jal    R14,AddDec[R0]       ; sum := x + y

; i++
     add    R7,R7,R5             ; i++
     jump   mainLoop[R0]         ; goto mainLoop

mainDone
; terminate
     trap   R0,R0,R0             ; terminate

;---------------------------------------------------------------------
; Data for main program

k    data   30                   ; size of the BCD numbers
n    data   90                   ; number of powers
x
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
xlsd
     data   1

str
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   0
     data   $000a                ; Unicode character code for newline

;---------------------------------------------------------------------
; Procedure AddDec -- add two k-digit binary coded decimal (BCD) numbers
; Calling conventions;
;   Side effects: all argument registers are modified
;   R1 = k
;   R2 = xp = pointer to lsd of x
;   R3 = yp = pointer to lsd of y
;   R4 = sp = pointer to lsd of s
; Local register usage
;   R5 = constant 1
;   R6 = constant 10
;   R7 = carry
;   R8, R9, R10 hold temporary data
; Algorithm AddDec
;   carry := 0
;   while k>0 do
;     sum := *xp + *yp + carry
;     carry := 0
;     if sum > 9 then {carry := 1; sum := sum - 10}
;     *sp := sum
;     k--; xp--; yp--; sp--;
AddDec
; Save local registers
     store   R5,AddDecR5[R0]     ; save R5
     store   R6,AddDecR6[R0]     ; save R6
     store   R7,AddDecR7[R0]     ; save R7
     store   R8,AddDecR8[R0]     ; save R8
     store   R9,AddDecR9[R0]     ; save R9
     store   R10,AddDecR10[R0]   ; save R10
; Initialize
     lea     R5,1[R0]            ; R5 := constant 1
     lea     R6,10[R0]           ; R6 := constant 10
     add     R7,R0,R0            ; carry := 0
AddDecLoop
     cmp     R1,R0               ; compare k, 0
     jumple  AddDecReturn[R0]    ; if k <= 0 then goto AddDecReturn
     load    R9,0[R2]            ; R9 := *xp = x[k]
     load    R10,0[R3]           ; R10 := *yp = y[k]
     add     R9,R9,R10           ; R9 := x[k] + y[k]
     add     R9,R9,R7            ; R9 := x[k] + y[k] + carry (= "sum")
     add     R7,R0,R0            ; carry := 0 (default)
     cmp     R9,R6               ; compare sum, 10
     jumplt  AddDecNoCarry[R0]   ; if sum < 10 then goto AddDecNoCarry
     sub     R9,R9,R6            ; sum := sum - 10
     add     R7,R5,R0            ; carry := 1 (override default)
AddDecNoCarry
     store   R9,0[R4]            ; *sp := sum
     sub     R1,R1,R5            ; k--
     sub     R2,R2,R5            ; xp--
     sub     R3,R3,R5            ; yp--
     sub     R4,R4,R5            ; sp--
     jump    AddDecLoop[R0]      ; goto AddDecLoop
AddDecReturn
     load    R5,AddDecR5[R0]     ; restore R5
     load    R6,AddDecR6[R0]     ; restore R6
     load    R7,AddDecR7[R0]     ; restore R7
     load    R8,AddDecR8[R0]     ; restore R8
     load    R9,AddDecR9[R0]     ; restore R9
     load    R10,AddDecR10[R0]   ; restore R10
     jump    0[R14]              ; return

; Data for AddDec, static allocation
AddDecR5  data  0
AddDecR6  data  0
AddDecR7  data  0
AddDecR8  data  0
AddDecR9  data  0
AddDecR10 data  0
; End Procedure AddDec

;---------------------------------------------------------------------
; Procedure DecString -- convert a BCD integer to string
; Calling conventions
;   R1 = k = number of words (digits) in BCD integer x
;   R2 = xp = pointer to msb of x
;   R3 = sp = pointer to string s
DecString
     store   R4,DecStringR4[R0]  ; save R4
     store   R5,DecStringR5[R0]  ; save R5
     store   R6,DecStringR6[R0]  ; save R6
     lea     R4,1[R0]            ; R4 := constant 1
     lea     R5,$0030[R0]        ; R5 := constant unicode '0'
DecStringLoop
     cmp     R1,R0               ; compare k, 0
     jumple  DecStringDone[R0]   ; if k <= 0 then exit loop
     load    R6,0[R2]            ; R6 := x[i]
     add     R6,R6,R5            ; R6 := unicode char for x[i]
     store   R6,0[R3]            ; s[i] := unicode char for x[i]
     add     R2,R2,R4            ; xp++
     add     R3,R3,R4            ; sp++
     sub     R1,R1,R4            ; k--
     jump    DecStringLoop[R0]   ; goto DecStringLoop
DecStringDone
     load    R4,DecStringR4[R0]  ; restore R4
     load    R5,DecStringR5[R0]  ; restore R5
     load    R6,DecStringR6[R0]  ; restore R6
     jump    0[R14]              ; return
; Data for DecString, static allocation
DecStringR4  data  0
DecStringR5  data  0
DecStringR6  data  0
; End Procedure DecString
