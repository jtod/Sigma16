; BinToDec: Convert binary to decimal.
; Illustrate how to print a binary number as a string of decimal digits.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; The main program takes a 16-bit binary number, converts it to BCD
; with 5 digits, converts that to a string, and prints the string.  It
; uses several non-reentrant procedures, which are defined locally and
; use static local data.

; BinToDec -- converts a binary number to decimal (BCD)
; DecString -- converts a BCD number to a string
; AddDec -- adds two BCD numbers

;------------------------------------------------------------------------
; Main program

; Convert BCD number to string
     lea    R1,5[R0]               ; arg 1 := #digits in decx
     lea    R2,decx[R0]            ; arg 2 := &decx
     lea    R3,str[R0]             ; arg 3 := &str
     jal    R13,DecString[R0]      ; call DecString

; Write str
     lea    R1,2[R0]               ; arg 1 := trap code write
     lea    R2,str[R0]             ; arg 2 := &str
     lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
     trap   R1,R2,R3               ; write

     trap   R0,R0,R0               ; terminate

; Data for main program
decx                               ; BCD number 26,394
     data   2
     data   9
     data   3
     data   0
     data   4
str                                ; an array of 5 words
     data   0
     data   0
     data   0
     data   0
     data   0
newline
     data   10                     ; Unicode character code for newline

;------------------------------------------------------------------------
; Procedure BinToDec -- convert a binary number x to 5-digit decimal
; Argument x in R1
; Result placed in array Dec
; Temporary array Pwr
; Algorithm sketch: BinToDec
;   Dec = 00000
;   Pwr = 00001
;   while x /= 0
;     if lsb x = 1 then Dec := Dec + Pwr
;     Pwr = Pwr + Pwr
;     x := shiftright x
;
; for i = 4 downto 0 do
;   Dec[i] := 0
; while R1 /= 0 do
;   if 

; R1 contains binary number; convert to dec in array Decimal
;BinToDec

;------------------------------------------------------------------------
; Procedure AddDec -- add two k-digit binary-coded-decimal numbers
; Calling conventions
;   R1 = k
;   R2 = xp = pointer to lsb of x
;   R3 = yp = pointer to lsb of y
;   R4 = sp = pointer to lsb of s
; Side effects: R1,R2,R3,R4 are modified
; Algorithm AddDec
;   carry := 0
;   for i := k-1 downto 0 do
;     s[i] := x[i] +C y[i]
AddDec
     lea     R5,1[R0]              ; R5 := constant 1
     add     R6,R1,R0              ; R6 := k
     add     R15,R0,R0             ; carry := 0
AddDecLoop
     store   R5,AddDecR5[R0]       ; save R5
     store   R6,AddDecR6[R0]       ; save R6
     store   R7,AddDecR7[R0]       ; save R7
     store   R8,AddDecR8[R0]       ; save R8
     cmp     R1,R0                 ; compare k, 0
     jumplt  AddDecReturn[R0]      ; if k < 0 then goto AddDecReturn
     load    R8,0[R2]              ; R8 := x[k]
     load    R9,0[R3]              ; R9 := y[k]
     add    R8,R8,R9              ; R8 := x[k] + y[k] + carry  ???? addc
     store   R8,0[R4]              ; s[k] := x[k] + y[k] + carry
     sub     R6,R6,R5              ; k := k - 1
     sub     R2,R2,R5              ; xp := xp - 1
     sub     R3,R3,R5              ; yp := yp - 1
     sub     R4,R4,R5              ; sp := sp - 1
     jump    AddDecLoop[R0]        ; goto AddDecLoop
AddDecReturn
     load    R5,AddDecR5[R0]       ; restore R5
     load    R6,AddDecR6[R0]       ; restore R6
     load    R7,AddDecR7[R0]       ; restore R7
     load    R8,AddDecR8[R0]       ; restore R8
     jump    0[R13]                ; return
; Data for AddDec -- static allocation
AddDecR5  data  0
AddDecR6  data  0
AddDecR7  data  0
AddDecR8  data  0
; End Procedure AddDec

;------------------------------------------------------------------------
; Procedure DecString -- convert a BCD integer to string
; Calling conventions
;   R1 = k = number of words (digits) in BCD integer x
;   R2 = xp = pointer to msb of x
;   R3 = sp = pointer to string s
DecString
     store   R4,DecStringR4[R0]    ; save R4
     store   R5,DecStringR5[R0]    ; save R5
     store   R6,DecStringR6[R0]    ; save R6
     lea     R4,1[R0]              ; R4 := constant 1
     lea     R5,$0030[R0]          ; R5 := constant unicode '0'
DecStringLoop
     cmp     R1,R0                 ; compare k, 0
     jumple  DecStringDone[R0]     ; if k <= 0 then exit loop
     load    R6,0[R2]              ; R6 := x[i]
     add     R6,R6,R5              ; R6 := unicode char for x[i]
     store   R6,0[R3]              ; s[i] := unicode char for x[i]
     add     R2,R2,R4              ; xp++
     add     R3,R3,R4              ; sp++
     sub     R1,R1,R4              ; k--
     jump    DecStringLoop[R0]     ; goto DecStringLoop
DecStringDone
     load    R4,DecStringR4[R0]    ; restore R4
     load    R5,DecStringR5[R0]    ; restore R5
     load    R6,DecStringR6[R0]    ; restore R6
     jump    0[R13]                ; return
; Data for DecString -- static allocation
DecStringR4  data  0
DecStringR5  data  0
DecStringR6  data  0
; End Procedure DecString
