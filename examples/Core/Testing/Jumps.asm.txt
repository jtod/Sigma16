; Jumps: Test Sigma16 Core jumping instructions.
; Test jump, conditional jumps, and conditional jump pseudoinstructions.
; Sigma16: https://jtod.github.io/home/Sigma16  John O'Donnell, 2023

; Full test: step through the program.  Quick test: run the program to
; completion and then check the counts at the end.

;   R8 is GoodCount: number of key desinations reached correctly
;   R9 is ErrorCount: number of key destinations reached incorrectly
;   R1, R2 contain test data, where R1 < R2
;   R7 = 1

; Condition code flags are defined in architecture.mjs

; Each flag has a symbolic name used in the implementation, and a
; display name used in the "instruction decode" panel on the emulator
; GUI.  The usual relations < = > are used for integers (binary
; representation) , while L = G are used for natural numbers (two's
; complement representation).

; index code  display   type and relation
;----------------------------------------------
; bit 0   g      >        int >
; bit 1   G      G        nat >
; bit 2   E      =        nat,int =
; bit 3   L      L        nat <
; bit 4   l      <        int <
; bit 5   v      v        int overflow
; bit 6   V      V        int overflow
; bit 7   C      C        bin carry out, carry in (addc)
; bit 8   S      S        bin carry out, carry in (addc)
; bit 9   s      s        bin carry out, carry in (addc)

; Unconditional jump

     lea   R7,1[R0]    ; for incrementing counts
     add   R8,R0,R0    ; GoodCount := 0
     add   R9,R0,R0    ; ErrorCount := 0
     lea   R1,7[R0]    ; R1 := 7 test data
     lea   R2,9[R0]    ; R2 := 9 test data
     jump  loop[R0]    ; should go there
     add   R9,R9,R7    ; ERROR! increment ErrorCcount
     jump  done1[R0]   ; skip
loop add   R8,R8,R7   ; GOOD!  increment GoodCount
done1

; Test the jumplt pseudoinstructions using jumpc1 (jump if CC.4 = 1)

; jumplt jumps
      cmp    R1,R2      ; <
      jumplt lt1[R0]    ; jumpc1 should jump
      add    R9,R9,R7   ; increment error count
      jump   lt2[R0]
lt1   add    R8,R8,R7   ; increment good count
lt2

; jumplt doesn't jump
      cmp    R2,R1      ; >
      jumplt lt3[R0]    ; jumpc1 should not jump
      add    R8,R8,R7   ; increment good count
      jump   lt4[R0]
lt3   add    R9,R9,R7   ; increment error count
lt4


; Test the jumpge pseudoinstructions using jumpc0 (jump if CC.4 = 0)

; jumpge jumps
      cmp    R2,R1      ; >
      jumpge ge1[R0]    ; jumpc0 should jump
      add    R9,R9,R7   ; increment error count
      jump   ge2[R0]
ge1   add    R8,R8,R7   ; increment good count
ge2

; jumpge doesn't jump
      cmp    R1,R2      ; <
      jumpge ge3[R0]    ; jumpc0 should not jump
      add    R8,R8,R7   ; increment good count
      jump   ge4[R0]
ge3   add    R9,R9,R7   ; increment error count
ge4

done
      store  R8,GoodCount[R0]    ; save count of correct results
      store  R9,ErrorCount[R0]   ; save count of errors

; Jal

     jal   R13,sub1[R0]
     jal   R13,sub2[R0]
     trap  R0,R0,R0          ; terminate

sub1 lea   R3,20[R0]
     jump  0[R13]

sub2 lea   R4,40[R0]
     jump  0[R13]

GoodCount   data  0              ; count of successful tests
ErrorCount  data  0              ; count of unsuccessful tests
