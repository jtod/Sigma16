; AsmCore: Test assembly of each statement in the core architecture.
; Check that the assembler generates correct object code.
; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2023

; This is a set of examples of all the core assembly language
; statements.  It should assemble without any syntax errors, but
; running it won't do anything useful.

;-------------------------------------------------------------
; Character set
;-------------------------------------------------------------

; The following characters should be accepted

; abcdefghijklmnopqrstuvwxyz
; ABCDEFGHIJKLMNOPQRSTUVWXYZ
; 0123456789
; `!"$%^&*()-_=+[{]};:'@#~|,<.>/?

;-------------------------------------------------------------
; Core instructions
;-------------------------------------------------------------

; Core RRR instructions

       add      R5,R12,R7     ; 05c7
       add      r7,r8,r9      ; 0789
       sub      R12,R3,R15    ; 1c3f
x      sub      R2,r5,R2      ; 1252  x = 0003 relocatable
       mul      R1,R2,R3      ; 2123
       div      R1,R2,R3      ; 3123
loop   cmp      R1,R2         ; 4012  loop = 0006 relocatable
       trap     R1,R2,R3      ; a123

; Core RX instructions

       lea      R3,loop[R4]   ; f340 0006
       lea      R1,23[R2]     ; f120 0017
       lea      R5,-1[R12]    ; f5c0 ffff
       lea      r3,loop[R0]   ; f300 0006
       lea      r3,loop       ; f300 0006
       lea      r3,x[r8]      ; f380 0006
       lea      R12,$b3c2[R4] ; fc40 b3c2
       load     R4,x[R7]      ; f471 0003
       load     R4,x[R0]      ; f401 0003
       load     R4,x          ; f401 0003
       load     R4,x[r2]      ; f421 0003
       load     R1,loop[R2]   ; f121 0006
       store    R9,$2b7f[R10] ; f9a2 2b7f
       store    r8,x[R12]     ; f8c2 0003
       jump     x[R2]         ; f023 0003
       jumpc0   11,10[R0]     ; fb04 000a
       jumpc1   5,11[R1]      ; f515 000b
       jal      R13,loop[R0]  ; fd0a 0006

; Core pseudoinstructions

       jumplt   16[R0]        ; f406 0010   jumpc1 <   < is cc_4
       jumpeq   18[R2]        ; f226 0012   jumpc1 =   = is cc_2
       jumpgt   20[R4]        ; f046 0014   jumpc1 >   > is cc_0
       jumpv    22[R6]        ; f566 0016   jumpc1 v   v is cc_5
       jumpco   26[R10]       ; f7a6 001a   jumpc1 C   C is cc_7

       jumple   21[R1]        ; f015 0015   jumpc0 not >   > is cc_0
       jumpne   22[R3]        ; f235 0016   jumpc0 not =   = is cc_2
       jumpge   23[R5]        ; f455 0017   jumpc0 not <   < is cc_4
       jumpnv   32[R7]        ; f575 0020   jumpc0 not v   v is cc_5
       jumpnco  42[R11]       ; f7b5 002a   jumpc0 not C   C is cc_7

; Data statements

answer data     42            ; 002a  positive integer
       data     60000         ; ea60  large natural
       data     -1            ; ffff  negative integer
       data     $03f2         ; 03f2  hex
       data     x             ; 0003  relocatable label
bla    data     loop          ; 0006  relocatable equ
ate    data     eight         ; 0008  fixed equ
eight  equ      8             ; 0008  constant
