; Show what happens if a procedure keeping the return address in R13
; calls another procedure, again using R13 as the return address.

; I've made several changes from the program in Lecture 12 Slide 17,
; which contained several errors.

; The program is supposed to calculate result = 2 * (x+1)^2

; However, since both functions are called using R13 as the return
; address, it doesn't terminate, but goes into an infinite loop.  This
; illustrates why a rigid calling convention that always uses R13 as
; the return address, and that doesn't save R13, won't work if one
; procedure calls another one.

; One way to fix the error is to use a different register for the
; return address of square: try changing jal R13,square[R0] to jal
; R12,square[R0] and (in square) change jump 0[R13] to jump 0[R12],
; and the program will work.

; However, that approach won't scale up to large programs, and in
; general we need to store the return address into memory.

; Main program

       load  R1,x[R0]         ; R1 := x
       jal   R13,proc1[R0]    ; call proc1
;      load  R1,y[R0]         ; (DELETE THIS INSTRUCTION: no harm but silly)
       store R1,result[R0]    ; result := R1 = result returned by proc1
       trap  R0,R0,R0         ; terminate (ADD THIS INSTRUCTION)

; Procedure proc1 receives an argument in R1
; The result = 2 * (argument+1)^2 is returned in R1

proc1  lea   R2,1[R0]          ; R1 := 1
       add   R1,R1,R2         ; R1 := R1 + 1  (CHANGE LAST REG TO R2)
       jal   R13,square[R0]
       add   R1,R1,R1
       jump  0[R13]

; Procedure square receives an argument in R1
; The result = argument^2 is returned in R1

square mul   R1,R1,R1
       jump  0[R13]

x      data  3
result data  0

; y      data  4             ; DELETE
