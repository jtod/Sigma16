; Sigma16 program saveR13stack
; John O'Donnell, 2019

; See the similar program zapR13crash.  This version of the program
; pushes the return address onto a stack when a procedure is called,
; so it allows nested calls.

; Note: for simplicity, this program doesn't check for stack overflow,
; and it doesn't save or restore registers, and it doesn't provide
; local variables, and it doesn't use dynamic links.  The purpose of
; this program is to demonstrate the basics of using a stack to save
; return addresses, but a full system for calling procedures needs
; those additional features.

; There are several functions.  They all take one argument x which is
; passed in R1, and return one result f(x) which is also passed back
; in R1.  Each function multiplies x by a constant.  Some of the
; functions (double, triple, quadruple) do the work by themselves, but
; one of them (mult6) calculates 6*x by evaluating triple (double
; (x)).  It gets the right answer, and it returns successfully!

; The main program initializes the stack as follows:
;    lea    R14,CallStack[R0]  ; R14 := &stack, R14 is the stack pointer
;    store  R0,0[R14]          ; (not actually necessary)

; A function is called as follows:
;    (put the argument into R1)
;    lea    R14,1[R14]         ; advance the stack pointer to new frame
;    jal    R13,function[R0]   ; goto function, R13 := return address

; The function begins as follows:
;    store  R13,0[R14]         ; save return address on top of stack

; The function finishes and returns as follows:
;    (put the result into R1)
;    load   R13,0[R14]         ; restore return address from top of stack
;    lea    R2,1[R0]           ; R2 := size of stack frame
;    sub    R14,R14,R2         ; remove top frame from stack
;    jump   0[R13]             ; return to caller

MainProgram

; Initialize the stack pointer
    lea    R14,CallStack[R0]  ; R14 = stack pointer := &CallStack
    store  R0,0[R14]          ; (not actually necessary)

; R1 := double(2)
    lea    R1,2[R0]           ; R1 = argument := 2
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,double[R0]     ; R1 := double(R1) = 2*2 = 4
    
; R1 := triple(R1)
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,triple[R0]     ; R1 := triple(R1) = 3*4 = 12
    
; R1 := quadruple(R1)
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,quadruple[R0]  ; R1 := quadruple(R1) = 4*12 = 48
    
    store  R1,result1[R0]     ; result1 := 4*(3*((2*2)) = 48

; This next call works because the return addresses are being saved on
; the stack.  In the previous program (zapR13crash) it doesn't work
; because a called function calls another function.

; R1 := mult6(2)
    lea    R1,2[R0]           ; R1 = x = 2
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,mult6[R0]      ; R1 = triple(double(x)) = 3*(2*x)

    store  R1,result2[R0]     ; result2 := 6*2 = 12

    trap   R0,R0,R0           ; terminate main program

double
; receive argument x in R1
; return result in R1 = 2*x
    store  R13,0[R14]         ; save return address on top of stack
    lea    R2,2[R0]           ; R2 := 2
    mul    R1,R2,R1           ; result := 2*x
    load   R13,0[R14]         ; restore return address from top of stack
    lea    R2,1[R0]           ; R2 := size of stack frame
    sub    R14,R14,R2         ; remove top frame from stack
    jump   0[R13]             ; return R1 = 2*x

triple
; receive argument x in R1
; return result in R1 = 3*x
    store  R13,0[R14]         ; save return address on top of stack
    lea    R2,3[R0]
    mul    R1,R2,R1           ; R1 := 3*x
    load   R13,0[R14]         ; restore return address from top of stack
    lea    R2,1[R0]           ; R2 := size of stack frame
    sub    R14,R14,R2         ; remove top frame from stack
    jump   0[R13]             ; return R1 = 3*x

quadruple
; receive argument x in R1
; return result in R1 = 4*x
    store  R13,0[R14]         ; save return address on top of stack
    lea    R2,4[R0]
    mul    R1,R2,R1           ; R1 := 4*x
    load   R13,0[R14]         ; restore return address from top of stack
    lea    R2,1[R0]           ; R2 := size of stack frame
    sub    R14,R14,R2         ; remove top frame from stack
    jump   0[R13]             ; return R1 = 4*x

mult6
; receive argument x in R1
; return result in R1
; This is a common kind of function: it doesn't do much work, it
; just calls other functions to do all the real work
    store  R13,0[R14]         ; save return address on top of stack
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,double[R0]     ; R1 := double(x) = 2*x
    lea    R14,1[R14]         ; advance the stack pointer
    jal    R13,triple[R0]     ; R1 : triple(2*x) = 3*(2*x)
    load   R13,0[R14]         ; restore return address from top of stack
    lea    R2,1[R0]           ; R2 := size of stack frame
    sub    R14,R14,R2         ; remove top frame from stack
    jump   0[R13]             ; return R1 = 3*(2*x)

result1    data  0            ; result of first sequence of calls
result2    data  0            ; result of the mult6 call
CallStack  data  0            ; The stack grows beyond this point
